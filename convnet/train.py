#!/usr/bin/env python3

# TODO: Try different biases, bias initializers, dilation, and strides
import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D, AveragePooling2D
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping
import data
import numpy as np
import os
import json
# np.set_printoptions(threshold=np.nan)

d = data.Data().get_partitions(0.8,0.1,0.1)
(x_train, y_train), (x_valid, y_valid), (x_test,y_test) = d

# Preprocess data by one-hot encoding and per-image standardizing
y_train = keras.utils.to_categorical(y_train, 3)
y_valid = keras.utils.to_categorical(y_valid, 3)
y_test = keras.utils.to_categorical(y_test, 3)

def std_imgs(imgs,partition):
    global means,stddevs
    imgs = imgs.astype('float32') - 127.5
    imgs /= 127.5
    return imgs

x_train = std_imgs(x_train,'train')
x_valid = std_imgs(x_valid,'valid')
x_test = std_imgs(x_test,'test')

# Create model

model = Sequential()
model.add(Conv2D(32, (3, 3),
strides=(1,1),
padding='same',input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3),strides=(2,2)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(256))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(3))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
optimizer=opt,
metrics=['accuracy'])

cbs = [EarlyStopping(monitor='val_acc',patience=10,mode='max')]
# This will do preprocessing and realtime data augmentation:
samplewise_std = True
featurewise_std = False

datagen = ImageDataGenerator(
featurewise_center=featurewise_std,  # set input mean to 0 over the dataset
samplewise_center=samplewise_std,  # set each sample mean to 0
featurewise_std_normalization=featurewise_std,  # divide inputs by std of the dataset
samplewise_std_normalization=samplewise_std,  # divide each input by its std
zca_whitening=False,  # apply ZCA whitening
rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
width_shift_range=0,  # randomly shift images horizontally (fraction of total width)
height_shift_range=0,  # randomly shift images vertically (fraction of total height)
horizontal_flip=True,  # randomly flip images
vertical_flip=True)  # randomly flip images

# Compute quantities required for feature-wise normalization
# (std, mean, and principal components if ZCA whitening is applied).
datagen.fit(x_train)

valid_datagen = datagen
test_datagen = datagen
if samplewise_std:
    valid_datagen = ImageDataGenerator(
    samplewise_center=samplewise_std,
    samplewise_std_normalization=samplewise_std)
    test_datagen = ImageDataGenerator(
    samplewise_center=samplewise_std,
    samplewise_std_normalization=samplewise_std)
    valid_datagen.fit(x_valid)
    test_datagen.fit(x_test)


# Fit the model on the batches generated by datagen.flow().
model.fit_generator(datagen.flow(x_train, y_train,
batch_size=32),
epochs=100,
validation_data=valid_datagen.flow(x_valid, y_valid),
callbacks=cbs,
workers=4,
# class_weight={0:1.0, 1:1.0, 2:3.57}, # didn't seem to make a difference
shuffle=True)

# Save model and weights
model_name = 'keras_obstacle.h5'
model.save(os.path.join(os.getcwd(),'saved_models', model_name))

statsf = open(os.path.join(os.getcwd(),'stats.json'),'w+')
means = np.mean(x_train,axis=(0,1,2))
stddevs = np.std(x_train,axis=(0,1,2))
json.dump({'means':means.tolist(),'stddevs':stddevs.tolist()},statsf)
print('Saved trained model')

# Score trained model.
scores = model.evaluate_generator(test_datagen.flow(x_test, y_test))
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])
