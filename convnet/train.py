#!/usr/bin/env python3

import keras
from keras.models import Sequential
from keras.layers import Dense, Dropout, Activation, Flatten
from keras.layers import Conv2D, MaxPooling2D
from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import EarlyStopping
import data
import numpy as np
import os
# np.set_printoptions(threshold=np.nan)

d = data.Data().get_partitions(0.8,0.1,0.1)
(x_train, y_train), (x_valid, y_valid), (x_test,y_test) = d

# Preprocess data by one-hot encoding and per-image standardizing
y_train = keras.utils.to_categorical(y_train, 2)
y_valid = keras.utils.to_categorical(y_valid, 2)
y_test = keras.utils.to_categorical(y_test, 2)

means = np.zeros((3))
stdevs = np.zeros((3))

def std_imgs(imgs,partition):
    global means,stddevs
    imgs = imgs.astype('float32') - 127.5
    imgs /= 127.5
    # only do stats on train partition
    if partition == 'train':
        means = np.mean(imgs,axis=(0,1,2))
        stddevs = np.std(imgs,axis=(0,1,2))
        print(partition,' means:',means)
        print(partition,' stddevs:',stddevs)
        imgs -= means
        imgs /= stddevs
    else:
        imgs -= means
        imgs /= stddevs

    return imgs

x_train = std_imgs(x_train,'train')
x_valid = std_imgs(x_valid,'valid')
x_test = std_imgs(x_test,'test')

# Create model
batch_size = 1
num_classes = 2
epochs = 100
data_augmentation = True
model_name = 'keras_lane.h5'

model = Sequential()
model.add(Conv2D(32, (3, 3), padding='same',
                 input_shape=x_train.shape[1:]))
model.add(Activation('relu'))
model.add(Conv2D(32, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Conv2D(64, (3, 3), padding='same'))
model.add(Activation('relu'))
model.add(Conv2D(64, (3, 3)))
model.add(Activation('relu'))
model.add(MaxPooling2D(pool_size=(2, 2)))
model.add(Dropout(0.25))

model.add(Flatten())
model.add(Dense(512))
model.add(Activation('relu'))
model.add(Dropout(0.5))
model.add(Dense(num_classes))
model.add(Activation('softmax'))

# initiate RMSprop optimizer
opt = keras.optimizers.rmsprop(lr=0.0001, decay=1e-6)

# Let's train the model using RMSprop
model.compile(loss='categorical_crossentropy',
              optimizer=opt,
              metrics=['accuracy'])

cbs = [EarlyStopping(monitor='val_acc',patience=5,mode='max')]
if not data_augmentation:
    print('Not using data augmentation.')
    model.fit(x_train, y_train,
    batch_size=batch_size,
    epochs=epochs,
    validation_data=(x_valid, y_valid),
    callbacks=cbs,
    shuffle=True)
else:
    print('Using real-time data augmentation.')
    # This will do preprocessing and realtime data augmentation:
    datagen = ImageDataGenerator(
    featurewise_center=False,  # set input mean to 0 over the dataset
    samplewise_center=False,  # set each sample mean to 0
    featurewise_std_normalization=False,  # divide inputs by std of the dataset
    samplewise_std_normalization=False,  # divide each input by its std
    zca_whitening=False,  # apply ZCA whitening
    rotation_range=0,  # randomly rotate images in the range (degrees, 0 to 180)
    width_shift_range=0.1,  # randomly shift images horizontally (fraction of total width)
    height_shift_range=0.1,  # randomly shift images vertically (fraction of total height)
    horizontal_flip=True,  # randomly flip images
    vertical_flip=True)  # randomly flip images

    # Compute quantities required for feature-wise normalization
    # (std, mean, and principal components if ZCA whitening is applied).
    datagen.fit(x_train)

    # Fit the model on the batches generated by datagen.flow().
    model.fit_generator(datagen.flow(x_train, y_train,
    batch_size=batch_size),
    epochs=epochs,
    validation_data=(x_valid, y_valid),
    callbacks=cbs,
    workers=4,
    shuffle=True)

# Save model and weights
model.save(os.path.join(os.getcwd(),'saved_models', model_name))
print('Saved trained model')

# Score trained model.
scores = model.evaluate(x_test, y_test, verbose=1)
print('Test loss:', scores[0])
print('Test accuracy:', scores[1])

# For reference
"""
keras.layers.Conv2D(filters,
kernel_size, strides=(1, 1),            # try diff
padding='valid',
data_format=None,
dilation_rate=(1, 1),                   # should read about
activation='relu',                      # dunno
use_bias=True,                          # try diff
kernel_initializer='glorot_uniform',
bias_initializer='zeros',               # try diff
kernel_regularizer=None,
bias_regularizer=None,
activity_regularizer=None,
kernel_constraint=None,
bias_constraint=None
)
"""
